version: "3.8"
services:
    # recipes app, uptime monitor, grafana, timeseries db, home assistant?,
    jellyfin:
        image: linuxserver/jellyfin:latest
        container_name: jellyfin
        user: "0:999"
        environment:
            - PUID=0
            - PGID=999
            - TZ=${TZ}
            - JELLYFIN_PublishedServerUrl=https://jelly.rossreicks.com
        volumes:
            - ./config/jellyfin:/config
            - ${DATA_DIR}/TVShows:/data/tvshows
            - ${DATA_DIR}/Movies:/data/movies
        expose:
            - 8096
            - 8920
        networks:
            - web
        restart: unless-stopped

    prowlarr:
        image: lscr.io/linuxserver/prowlarr:latest
        container_name: prowlarr
        environment:
            - PUID=${PUID}
            - PGID=${PGID}
            - TZ=${TZ}
        volumes:
            - ./config/prowlarr:/config
        networks:
            - web
        expose:
            - 9696
        restart: unless-stopped

    jellyseerr:
        image: fallenbagel/jellyseerr:latest
        container_name: jellyseerr
        user: "0:999"
        networks:
            - web
        environment:
            - LOG_LEVEL=debug
            - TZ=${TZ}
        expose:
            - 5055
        volumes:
            - ./config/jellyseerr:/app/config
        restart: unless-stopped

    plex:
        container_name: plex
        image: lscr.io/linuxserver/plex:latest
        restart: unless-stopped
        networks:
            - web
        ports:
            - "32400:32400/tcp"
        environment:
            - TZ=${TZ}
            - PUID=0
            - PGID=999
            - VERSION=docker
            - PLEX_CLAIM=${PLEX_CLAIM}
        expose:
            - 32400
        volumes:
            - "./config/plex:/config"
            - "./config/plex/transcode:/transcode"
            - ${DATA_DIR}:/media

    # ----------------------------------------
    # CADDY
    # Reverse Proxy With Google Auth
    # ----------------------------------------
    caddy:
        image: ghcr.io/authp/authp:latest
        container_name: caddy
        restart: unless-stopped
        user: "${PUID}:${PGID}"
        ports:
            - "80:80"
            - "443:443"
        logging:
            driver: "json-file"
            options:
                max-file: "5"
                max-size: "10m"
        environment:
            - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
            - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
            - OAUTH_RANDOM_SECRET=${OAUTH_RANDOM_SECRET}
            - EMAIL_WHITELIST=${EMAIL_WHITELIST}
            - DOMAIN=${DOMAIN}
            - PUID=${PUID}
            - PGID=${PGID}
            - TZ=${TZ}
        volumes:
            - ./config/caddy/Caddyfile:/etc/caddy/Caddyfile
            - ./config/caddy/data:/data
            - ./config/caddy/config:/config
        networks:
            - web

    # ----------------------------------------
    # DELUGE
    # Torrent Client - VPN killswitch enabled
    # ----------------------------------------
    arch-delugevpn:
        image: binhex/arch-delugevpn
        container_name: delugevpn
        restart: unless-stopped
        logging:
            driver: "json-file"
            options:
                max-file: "5"
                max-size: "10m"
        networks:
            - web
        expose:
            - 8112
            - 8118
            - 58846
            - 58946
        ports:
            - "8112:8112"
        cap_add:
            - NET_ADMIN
        environment:
            - TZ=${TZ}
            - PUID=0
            - PGID=999
            - VPN_ENABLED=yes
            - VPN_USER=${VPN_USER}
            - VPN_PASS=${VPN_PASS}
            - VPN_PROTOCOL=udp
            - VPN_PROV=custom
            - LAN_NETWORK=${HOME_CIDR}
            - ENABLE_PRIVOXY=yes
            - STRICT_PORT_FORWARD=yes
            - NAME_SERVERS=84.200.69.80,37.235.1.174,1.1.1.1,37.235.1.177,84.200.70.40,1.0.0.1
            - DELUGE_ENABLE_WEBUI_PASSWORD=no
            - DEBUG=true
        volumes:
            - "${DATA_DIR}:/media"
            - "./config/delugevpn:/config"
            - "./config/openvpn:/config/openvpn"

    # ----------------------------------------
    # RADARR
    # Movie Management
    # ----------------------------------------
    radarr:
        image: linuxserver/radarr
        container_name: radarr
        restart: unless-stopped
        logging:
            driver: "json-file"
            options:
                max-file: "5"
                max-size: "10m"
        networks:
            - web
        expose:
            - 7878
        environment:
            - TZ=${TZ}
            - PUID=0
            - PGID=999
        volumes:
            - "./config/radarr:/config"
            - "${DATA_DIR}:/media"

    # ----------------------------------------
    # SONARR
    # TV Show Management
    # ----------------------------------------
    sonarr:
        image: linuxserver/sonarr
        container_name: sonarr
        restart: unless-stopped
        logging:
            driver: "json-file"
            options:
                max-file: "5"
                max-size: "10m"
        networks:
            - web
        expose:
            - 8989
        environment:
            - TZ=${TZ}
            - PUID=0
            - PGID=999
        volumes:
            - "./config/sonarr:/config"
            - "${DATA_DIR}:/media"

    homarr:
        container_name: homarr
        image: ghcr.io/ajnart/homarr:latest
        restart: unless-stopped
        user: "1000:1000"
        volumes:
            - ./config/homarr:/app/data/configs
            - ./config/homarr/icons:/app/public/icons
            - /var/run/docker.sock:/var/run/docker.sock
        environment:
            - TZ=${TZ}
            - PUID=${PUID}
            - PGID=${PGID}
        expose:
            - "7575:7575"
        networks:
            - web

    postgres-db:
        image: postgres:15.2
        container_name: postgres
        user: 0:0
        networks:
            - internal
        environment:
            POSTGRES_DB: "jfstat"
            POSTGRES_USER: ${POSTGRES_USER}
            POSTGRES_PASSWORD: ${POSTGRES_PASS}
        volumes:
            - ./config/postgres:/var/lib/postgresql/data

    jellystat:
        image: cyfershepard/jellystat:latest
        container_name: jellystat
        networks:
            - internal
            - web
        environment:
            POSTGRES_USER: ${POSTGRES_USER}
            POSTGRES_PASSWORD: ${POSTGRES_PASS}
            POSTGRES_IP: postgres-db
            POSTGRES_PORT: 5432
            JWT_SECRET: "my-secret-jwt-key"
        expose:
            - 3000
        volumes:
            - ./config/jellystat:/app/backend/backup-data
        depends_on:
            - postgres-db
        restart: unless-stopped

    # ----------------------------------------
    # INFLUXDB
    # Time Series Database
    # ----------------------------------------
    influxdb:
        image: influxdb
        container_name: influxdb
        restart: unless-stopped
        logging:
            driver: "json-file"
            options:
                max-file: "5"
                max-size: "10m"
        networks:
            - internal
        expose:
            - 8086
        ports:
            - 8086:8086
        environment:
            - TZ=${TZ}
        volumes:
            - /etc/localtime:/etc/localtime:ro
            - "./config/influxdb:/var/lib/influxdb2"

    telegraf:
        image: telegraf
        container_name: telegraf
        restart: always
        user: telegraf:1001
        networks:
            - internal
        links:
            - influxdb
        volumes:
            - ./config/telegraf/telegraf.conf:/etc/telegraf/telegraf.conf:ro
            - /var/run/docker.sock:/var/run/docker.sock
        depends_on:
            - influxdb
        environment:
            - INFLUX_TOKEN=${TELEGRAF_INFLUX_TOKEN}

    grafana:
        image: grafana/grafana:latest
        container_name: grafana
        user: "1000:1000"
        depends_on:
            - influxdb
        networks:
            - internal
            - web
        links:
            - influxdb
        expose:
            - 3000
        volumes:
            - ./config/grafana/data:/var/lib/grafana
        restart: unless-stopped

    # ----------------------------------------
    # DUCKDNS
    # Dynamic DNS - Not needed if you have a static IP
    # ----------------------------------------
    duckdns:
        image: lscr.io/linuxserver/duckdns:latest
        container_name: duckdns
        restart: always
        logging:
            driver: "json-file"
            options:
                max-file: "5"
                max-size: "10m"
        networks:
            - web
        environment:
            - TZ=${TZ}
            - SUBDOMAINS=${DUCK_DNS_SUBDOMAINS}
            - TOKEN=${DUCK_DNS_TOKEN}
            - LOG_FILE=true
        volumes:
            - ./config/duckdns:/config

    wireguard:
        image: lscr.io/linuxserver/wireguard:latest
        container_name: wireguard
        cap_add:
            - NET_ADMIN
        networks:
            - web
        environment:
            - TZ=${TZ}
            - PUID=${PUID}
            - PGID=${PGID}
            - PEERS=1
            - SERVERURL=vpn.rossreicks.com
            - ALLOWEDIPS=0.0.0.0/0 #would need to change this to just the vpc ips
            - PERSISTENTKEEPALIVE_PEERS=all
        volumes:
            - ./config/wireguard:/config
        ports:
            - 51820:51820/udp
        restart: unless-stopped

networks:
    internal:
    web:
